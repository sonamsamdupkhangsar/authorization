server:
  port: ${AUTH_SERVER_PORT}
  servlet:
    context-path: /issuer

logging:
  level:
    root: error
    me.sonam.auth: info
    me.sonam.auth.config: debug
    org.springframework.web: info
    org.springframework.security: info
    org.springframework.security.oauth2: info
    org.springframework.boot.autoconfigure: warn

spring:
  application:
    name: authorization-server
  datasource:
    url: jdbc:postgresql://${POSTGRES_SERVICE}/${POSTGRES_DBNAME}
    username: ${POSTGRES_USERNAME}
    password: ${POSTGRES_PASSWORD}
    driver-class-name: org.postgresql.Driver
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    generate-ddl: true

application-rest-service:
  root: ${APPLICATION_REST_SERVICE}
  client-role: /applications/clients/{clientId}/users/{authenticationId}


authentication-rest-service:
  root: ${AUTHENTICATION_REST_SERVICE}
  authenticate: /authentications/authenticate

user-rest-service:
  root: ${USER_REST_SERVICE}
  userByAuthid: /users/{authenticationId}


oauth2-token-mediator:
  root: ${TOKEN_MEDIATOR}
  clients: /oauth2-token-mediator/clients

jwtrequest:
  - in: /*
    out: /users/*
    accessToken:
      option: request
      scopes: message.read
      base64EncodedClientIdSecret: b2F1dGgtY2xpZW50Om9hdXRoLXNlY3JldA==

# this is used for getting accesstoken by header filter
auth-server:
  root: http://authorization-server/issuer
  oauth2token:
    path: /oauth2/token
    params: ?grant_type=client_credentials

