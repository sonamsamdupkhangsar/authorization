server:
  port: ${AUTH_SERVER_PORT}
  servlet:
    context-path: /issuer

logging:
  level:
    root: debug
#    org.apache.tomcat: error
#    org.apache.coyote.http11: deug
#    org.springframework.security.web: trace
#    org.springframework.web.cors: trace
#    org.springframework.security: trace
    me.sonam.auth: info
#    me.sonam.auth.config: debug
#    org.springframework.web: info
#    org.springframework.security: info
#    org.springframework.security.oauth2: info
#    org.springframework.boot.autoconfigure: warn

spring:
  application:
    name: authorization-server
  datasource:
    url: jdbc:postgresql://${POSTGRES_SERVICE}/${POSTGRES_DBNAME}
    username: ${POSTGRES_USERNAME}
    password: ${POSTGRES_PASSWORD}
    driver-class-name: org.postgresql.Driver
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    generate-ddl: true

application-rest-service:
  root: ${APPLICATION_REST_SERVICE}
  client-role: /applications/clients/{clientId}/users/{authenticationId}

authentication-rest-service:
  root: ${AUTHENTICATION_REST_SERVICE}
  authenticate: /authentications/authenticate

user-rest-service:
  root: ${USER_REST_SERVICE}
  userByAuthId: /users/{authenticationId}

organization-rest-service:
  root: ${ORGANIZATION_REST_SERVICE}
  userExistsInOrganization: /organizations/{organizationId}/users/{userId}

account-rest-service:
  root: ${ACCOUNT_REST_SERVICE}
  emailUsername: /accounts/email/authenticationId/{email}
  emailMySecret: /accounts/emailmysecret/{authenticationId}

oauth2-token-mediator:
  root: ${TOKEN_MEDIATOR}
  clients: /oauth2-token-mediator/clients

jwtrequest:
  - in: /*
    out: /users/(.)*
    accessToken:
      option: request
      scopes: ${REQUEST_SCOPES}
      base64EncodedClientIdSecret: ${BASE64_CLIENT_ID_SECRET}
  - in: /*
    out: /organizations/(.)*/users/(.)*
    accessToken:
      option: request
      scopes: ${REQUEST_SCOPES}
      base64EncodedClientIdSecret: ${BASE64_CLIENT_ID_SECRET}
  - in: /*
    out: /oauth2-token-mediator/clients
    accessToken:
      option: request
      scopes: ${REQUEST_SCOPES}
      base64EncodedClientIdSecret: ${BASE64_CLIENT_ID_SECRET}
  - in: /*
    out: /oauth2-token-mediator/clients/(.)*
    accessToken:
      option: request
      scopes: ${REQUEST_SCOPES}
      base64EncodedClientIdSecret: ${BASE64_CLIENT_ID_SECRET}

# this is used for getting accesstoken by header filter
auth-server:
  root: http://authorization-server/issuer
  oauth2token:
    path: /oauth2/token
    params: ?grant_type=client_credentials

client:
  url: ${client-app}
  forgot-username-password: /forgot