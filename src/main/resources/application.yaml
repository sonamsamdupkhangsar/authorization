server:
  port: ${AUTH_SERVER_PORT}
  servlet:
    context-path: /issuer

logging:
  level:
    root: warn
    me.sonam.auth: info
    com.netflix: off
    me.sonam.auth.config: debug
    me.sonam.auth.service.TokenFilter: error
#    org.springframework.web: info
#    org.springframework.security: info
#    org.springframework.security.oauth2: info
#    org.springframework.boot.autoconfigure: warn

spring:
  application:
    name: authorization-server
  datasource:
    url: jdbc:postgresql://${POSTGRES_SERVICE}/${POSTGRES_DBNAME}
    username: ${POSTGRES_USERNAME}
    password: ${POSTGRES_PASSWORD}
    driver-class-name: org.postgresql.Driver
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    generate-ddl: true
  thymeleaf: # to enable hot reload of Thymeleaf templates
    cache: false
    mode: HTML
    encoding: UTF-8
    #prefix: file:src/main/resources/templates/
    classpath: /templates/
    suffix: .html
  resources: # Static resources
    static-locations: file:src/main/resources/static/
    cache:
      period: 0
  authorization-server:
    forward-cookies: false

application-rest-service:
  root: ${APPLICATION_REST_SERVICE}
  client-role: /applications/clients/{clientId}/users/{authenticationId}

authentication-rest-service:
  root: ${AUTHENTICATION_REST_SERVICE}
  authenticate: /authentications/authenticate

user-rest-service:
  root: ${USER_REST_SERVICE}
  context: /users
  userId: ${user-rest-service.context}/{id}
  userByAuthId: ${user-rest-service.context}/authentication-id/{authenticationId}

organization-rest-service:
  root: ${ORGANIZATION_REST_SERVICE}
  userExistsInOrganization: /organizations/{organizationId}/users/{userId}

account-rest-service:
  root: ${ACCOUNT_REST_SERVICE}
  context: /accounts
  emailUsername: /email/{email}/authentication-id
  emailMySecret: /email/{email}/password-secret
  emailActivateLink: /active/email/{email}/password-secret
  validateEmailLoginSecret: /{email}/password-secret/{secret}
  updatePassword: /password-secret

oauth2-token-mediator:
  root: ${TOKEN_MEDIATOR}
  clients: /oauth2-token-mediator/clients

# this is used for getting accesstoken by header filter
auth-server:
  root: http://authorization-server/issuer
  oauth2token:
    path: /oauth2/token
    grantType: client_credentials
    issuerTokenPath: /issuer/oauth2/token


client:
  url: ${client-app}
  forgot-username-password: /forgot

requestFilters:
  - in:
    out: /users, /users/authentication-id/(.)*, /users/authentication-id/*
    inHttpMethods: get
    accessToken:
      option: request
      scopes: ${REQUEST_SCOPES}
      base64EncodedClientIdSecret: ${BASE64_CLIENT_ID_SECRET}
  - in:
    out: /organizations/(.)*/users/(.)*
    inHttpMethods: get
    accessToken:
      option: request
      scopes: ${REQUEST_SCOPES}
      base64EncodedClientIdSecret: ${BASE64_CLIENT_ID_SECRET}
  - in: /clients
    out: /oauth2-token-mediator/clients, /oauth2-token-mediator/clients/(.)*
    inHttpMethods: post, put
    accessToken:
      option: forward
  - in: /clients/(.)*/user-id/(.)*, /clients
    out: /oauth2-token-mediator/clients/(.)*
    inHttpMethods: delete
    accessToken:
      option: forward
  - in: /password/(.)*/(.)*
    out: /accounts/(.)*/password-secret/(.)*
    inHttpMethods: get
    accessToken:
      option: request
      scopes: ${REQUEST_SCOPES}
      base64EncodedClientIdSecret: ${BASE64_CLIENT_ID_SECRET}
  - in: /password/(.)*/(.)*
    out: /accounts/password-secret
    inHttpMethods: post
    accessToken:
      option: request
      scopes: ${REQUEST_SCOPES}
      base64EncodedClientIdSecret: ${BASE64_CLIENT_ID_SECRET}
  - in: /forgotUsername
    out: /accounts/email/(.)*/authentication-id
    inHttpMethods: put
    accessToken:
      option: request
      scopes: ${REQUEST_SCOPES}
      base64EncodedClientIdSecret: ${BASE64_CLIENT_ID_SECRET}
  - in: /forgotPassword
    out: /accounts/email/(.)*/password-secret
    inHttpMethods: post
    accessToken:
      option: request
      scopes: ${REQUEST_SCOPES}
      base64EncodedClientIdSecret: ${BASE64_CLIENT_ID_SECRET}
  - in: /emailAccountActivateLink
    out: /accounts/active/email/(.)*/password-secret
    inHttpMethods: put
    accessToken:
      option: request
      scopes: ${REQUEST_SCOPES}
      base64EncodedClientIdSecret: ${BASE64_CLIENT_ID_SECRET}
  - in:
    out: /authentications/authenticate
    inHttpMethods: post
    accessToken:
      option: request
      scopes: ${REQUEST_SCOPES}
      base64EncodedClientIdSecret: ${BASE64_CLIENT_ID_SECRET}


# this is for create authzmanager client if it is not present
authzmanager-id: b4dfe3fb-1692-44b8-92ab-366ccc84b539
authzmanager-client: b4dfe3fb-1692-44b8-92ab-366ccc84b539-authzmanager
