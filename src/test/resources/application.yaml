#server:
#  port: 9000
AUTH_SERVER_PORT: 9000


logging:
  level:
    root: INFO
    org.springframework.web: INFO
    org.springframework.security: info
    org.springframework.security.oauth2: info
    me.sonam: debug
#    org.springframework.boot.autoconfigure: DEBUG

eureka:
  client:
    enabled: false

spring:
  profiles:
    active: localDevTest
  application:
    name: authorization-service
  datasource:
    url: jdbc:hsqldb:mem:testdb
    username: sa
    password:
    driver-class-name: org.hsqldb.jdbc.JDBCDriver
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.HSQLDialect
    generate-ddl: true

application-rest-service:
  root: http://localhost:8080
  client-role: /applications/clients/{clientId}/users/{authenticationId}

authentication-rest-service:
  root: http://localhost:8080
  authenticate: /authentications/authenticate

user-rest-service:
  root: http://localhost:8080
  userByAuthid: /users/{authenticationId}

ISSUER_URL: http://my-server:9001
private-client-url: http://127.0.0.1:8090

jwtrequest:
  - in: /*
    out: /users/*
    accessToken:
      option: request
      scopes: message.read
      base64EncodedClientIdSecret: b2F1dGgtY2xpZW50Om9hdXRoLXNlY3JldA==

# this is used for getting accesstoken by header filter
auth-server:
  root: http://localhost:{port}
  oauth2token:
    path: /oauth2/token
    params: ?grant_type=client_credentials

oauth2-token-mediator:
  root: http://localhost:8080
  clients: /clients