#server:
#  port: 9000
AUTH_SERVER_PORT: 9000
server:
  servlet:
    context-path: /issuer


logging:
  level:
    root: INFO
    org.springframework.web: INFO
    org.springframework.security: info
    org.springframework.security.oauth2: info
    me.sonam.auth: debug
#    org.springframework.boot.autoconfigure: DEBUG

eureka:
  client:
    enabled: false

spring:
  profiles:
    active: localDevTest
  application:
    name: authorization-service
  datasource:
    url: jdbc:hsqldb:mem:testdb
    username: sa
    password:
    driver-class-name: org.hsqldb.jdbc.JDBCDriver
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.HSQLDialect
    generate-ddl: true

application-rest-service:
  root: http://localhost:8080
  client-role: /applications/clients/{clientId}/users/{authenticationId}

authentication-rest-service:
  root: http://localhost:8080
  authenticate: /authentications/authenticate

user-rest-service:
  root: http://localhost:8080
  context: /users
  userByAuthId: ${user-rest-service.context}/authentication-id/{authenticationId}

organization-rest-service:
  root: http://localhost:8080
  userExistsInOrganization: /organizations/{organizationId}/users/{userId}

account-rest-service:
  root:  http://localhost:8080
  context: /accounts
  emailUsername: /email/{email}/authentication-id
  emailMySecret: /email/{email}/password-secret
  emailActivateLink: /active/email/{email}/password-secret
  validateEmailLoginSecret: /{email}/password-secret/{secret}
  updatePassword: /password-secret

ISSUER_URI: http://my-server:9001
private-client-url: http://127.0.0.1:8090


requestFilters:
  # get user info during authentication, user exists in organization during authentication,
  #  validate emailLoginSecret during password change
  - out: /users/authentication-id/(.)*,
      /organizations/(.)*/users/(.)*, /accounts/(.)*/password-secret/(.)*
    outHttpMethods: get
    accessToken:
      option: request
      scopes: ${REQUEST_SCOPES}
      base64EncodedClientIdSecret: ${BASE64_CLIENT_ID_SECRET}
    # update password, authenticate
  - out: /authentications/authenticate
    outHttpMethods: post
    accessToken:
      option: request
      scopes: ${REQUEST_SCOPES}
      base64EncodedClientIdSecret: ${BASE64_CLIENT_ID_SECRET}
  # email my username, emailActivationLink, email my secret for password reset
  - out: /accounts/email/(.)*/authentication-id, /accounts/active/email/(.)*/password-secret,
      /accounts/email/(.)*/password-secret, /accounts/password-secret
    outHttpMethods: put
    accessToken:
      option: request
      scopes: ${REQUEST_SCOPES}
      base64EncodedClientIdSecret: ${BASE64_CLIENT_ID_SECRET}

# this is used for getting accesstoken by header filter
auth-server:
  root: http://localhost:{port}
  oauth2token:
    path: /oauth2/token
    grantType: client_credentials


BASE64_CLIENT_ID_SECRET: dXNlcjpzZWNyZXQ=
REQUEST_SCOPES: cmVhZCB3cml0ZQ==

allowedOrigins: 10.0.0.28, localhost, 127.0.0.1

authzmanager: http://localhost:9093

# this is for create authzmanager client if it is not present
authzmanager-id: b4dfe3fb-1692-44b8-92ab-366ccc84b539
authzmanager-client: b4dfe3fb-1692-44b8-92ab-366ccc84b539-authzmanager
AUTHZMANAGER_INITIAL_SECRET: hello